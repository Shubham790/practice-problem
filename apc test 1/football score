The number of goals achieved by two football teams in matches in a league is given in the form of two lists. Consider:

    Football team A, has played three matches, and has scored teamA = [1, 2, 3] goals in each match respectively.
    Football team B, has played two matches, and has scored teamB = [2, 4] goals in each match respectively.

For each match of team B, compute the total number of matches of team A where team A has scored less than or equal to the number of goals scored by team B in that match.

 

In the above case:

    For 2 goals scored by team B in its first match, team A has 2 matches with scores 1 and 2.
    For 4 goals scored by team B in its second match, team A has 3 matches with scores 1, 2 and 3.

Hence, the answer: [2, 3]. 

 

Function Description 

 

Complete the function counts in the editor below. The function must return an array of m positive integers, one for each teamB[i] representing the total number of elements teamA[j] satisfying teamA[j] ≤ teamB[i] where 0 ≤ j < n and 0 ≤ i < m, in the given order.

 

counts has the following parameter(s):

    teamA[teamA[0],...teamA[n-1]]:  first array of positive integers

    teamB[teamB[0],...teamB[n-1]]:  second array of positive integers

 

Constraints

    2 ≤ n, m ≤ 105
    1 ≤ teamA[j] ≤ 109, where 0 ≤ j < n.
    1 ≤ teamB[i] ≤ 109, where 0 ≤ i < m.



solution

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);

int parse_int(char*);


 int compare(const void *a,const void *b)
 {
     return *(int *)a-*(int*)b;
 }
 int binarySearch(int arr[], int l, int r, int x) 
{
    while(l<r)
    {
     int mid=(l+r)/2;
     if(arr[mid]>x)
     {
         r=mid;
     }  
     else 
     {
         l=mid+1;
     }
    }
    return l;
}
int* counts(int teamA_count, int* teamA, int teamB_count, int* teamB, int* result_count) {
    int j=0;
    int *a=(int*)malloc(sizeof(int)*teamB_count);
    qsort(teamA,teamA_count,sizeof(int),compare);
    for(int i=0;i<teamB_count;i++)
    {
       int result=0;
     result = binarySearch(teamA, 0, teamA_count, teamB[i]); 
     a[j]=result;
     j++;
    }
    *result_count=j;
    return a;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int teamA_count = parse_int(ltrim(rtrim(readline())));

    int* teamA = malloc(teamA_count * sizeof(int));

    for (int i = 0; i < teamA_count; i++) {
        int teamA_item = parse_int(ltrim(rtrim(readline())));

        *(teamA + i) = teamA_item;
    }

    int teamB_count = parse_int(ltrim(rtrim(readline())));

    int* teamB = malloc(teamB_count * sizeof(int));

    for (int i = 0; i < teamB_count; i++) {
        int teamB_item = parse_int(ltrim(rtrim(readline())));

        *(teamB + i) = teamB_item;
    }

    int result_count;
    int* result = counts(teamA_count, teamA, teamB_count, teamB, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", *(result + i));

        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }

    fprintf(fptr, "\n");

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
